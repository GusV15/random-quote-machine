{"version":3,"sources":["components/Quote.js","components/Button.js","App.js","index.js"],"names":["Quote","quote","color","TextPageStyled","styled","div","currentColor","className","icon","faQuoteLeft","text","author","Button","handleClick","ButtonsPageStyled","previousColor","linkTumblr","encodeURIComponent","linkTwitter","href","target","rel","faTwitter","faTumblr","onClick","App","colors","useState","setQuote","nroQuote","setNroQuote","result","setResult","Math","floor","random","length","setColor","MainStyled","useEffect","a","fetch","response","json","quotes","consultarAPI","valueNroQuote","valueNroColor","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"41BAKA,IAsCeA,EAtCD,SAAC,GAAsB,IAApBC,EAAmB,EAAnBA,MAAOC,EAAY,EAAZA,MAEdC,EAAiBC,IAAOC,IAAV,IAMHH,EAAMI,aAYNJ,EAAMI,cAMvB,OACI,kBAACH,EAAD,KACI,yBAAKI,UAAU,QACX,kBAAC,IAAD,CAAiBA,UAAU,aAAaC,KAAMC,MAAe,8BAAOR,EAAMS,OAE9E,yBAAKH,UAAU,UAAf,IACK,8BAAON,EAAMU,W,igCChC9B,IAsEeC,EAtEA,SAAC,GAAmC,IAAjCC,EAAgC,EAAhCA,YAAaX,EAAmB,EAAnBA,MAAOD,EAAY,EAAZA,MAC5Ba,EAAoBV,IAAOC,IAAV,IAcCH,EAAMI,aA+BPJ,EAAMa,cACRb,EAAMI,cAGrBU,EAAU,oGAAgGC,mBAAmBhB,EAAMU,QAAzH,oBAA4IM,mBAAmBhB,EAAMS,MAArK,wFACVQ,EAAW,sFAAkFD,mBAAmBhB,EAAMS,MAA3G,cAAsHO,mBAAmBhB,EAAMU,SAEhK,OACI,kBAACG,EAAD,KACI,yBAAKP,UAAU,WACX,yBAAKA,UAAU,gBACX,4BAAQA,UAAU,sBACd,uBAAGY,KAAMD,EAAaE,OAAO,SAASC,IAAI,uBAAsB,kBAAC,IAAD,CAAiBd,UAAU,OAAOC,KAAMc,QAE5G,4BAAQf,UAAU,sBACd,uBAAGY,KAAMH,EAAYI,OAAO,SAASC,IAAI,uBAAsB,kBAAC,IAAD,CAAiBd,UAAU,OAAOC,KAAMe,SAG/G,4BAAQhB,UAAU,sBAAsBiB,QAASX,GAAjD,gB,mgBCcDY,MA7Ef,WAEE,IAAIC,EAAS,CAAC,UAAW,UAAW,UAAW,UAAW,UAAW,UAAW,UAAW,UAAW,UAAW,UAAW,UAAW,WAF1H,EAIaC,mBAAS,CACjCjB,KAAM,GACNC,OAAQ,KANG,mBAINV,EAJM,KAIC2B,EAJD,OAQmBD,mBAAS,GAR5B,mBAQNE,EARM,KAQIC,EARJ,OASeH,mBAAS,IATxB,mBASNI,EATM,KASEC,EATF,OAUaL,mBAAS,CACjCZ,cAAe,GACfT,aAAcoB,EAAOO,KAAKC,MAAMD,KAAKE,SAAWT,EAAOU,WAZ5C,mBAUNlC,EAVM,KAUCmC,EAVD,KAgBPC,EAAalC,IAAOC,IAAV,IASEH,EAAMI,aACXJ,EAAMI,cAuCnB,OA3BAiC,qBAAU,YAEU,uCAAG,8BAAAC,EAAA,4DACP,yIADO,SAEIC,MADX,0IADO,cAEbC,EAFa,gBAGEA,EAASC,OAHX,OAGbZ,EAHa,OAKnBC,EAAUD,GAEVH,EAAS,CACPlB,KAAMqB,EAAOa,OAAOf,GAAU5B,MAC9BU,OAAQoB,EAAOa,OAAOf,GAAUlB,SATf,2CAAH,qDAYlBkC,KACC,CAAChB,IAaF,kBAACS,EAAD,KACE,yBAAK/B,UAAU,OACb,yBAAKA,UAAU,aACb,kBAAC,EAAD,CAAON,MAAOA,EAAOC,MAAOA,IAC5B,kBAAC,EAAD,CAAQW,YAfI,WAClB,IAAMiC,EAAgBb,KAAKC,MAAMD,KAAKE,SAAWJ,EAAOa,OAAOR,QACzDW,EAAgBd,KAAKC,MAAMD,KAAKE,SAAWT,EAAOU,QACxDN,EAAYgB,GACZT,EAAS,CACPtB,cAAeb,EAAMI,aACrBA,aAAcoB,EAAOqB,MASiB7C,MAAOA,EAAOD,MAAOA,QCxEjE+C,IAASC,OACP,kBAAC,IAAMC,WAAP,KACE,kBAAC,EAAD,OAEFC,SAASC,eAAe,W","file":"static/js/main.e2bfc18f.chunk.js","sourcesContent":["import React from 'react';\r\nimport styled from 'styled-components'\r\nimport { FontAwesomeIcon } from '@fortawesome/react-fontawesome';\r\nimport { faQuoteLeft } from '@fortawesome/free-solid-svg-icons'\r\n\r\nconst Quote = ({ quote, color }) => {\r\n\r\n    const TextPageStyled = styled.div`\r\n        .text {\r\n            padding: 0 2.5rem;\r\n            font-size: 1.7em;\r\n            font-weight: 500;\r\n            margin-bottom: 1.25rem;\r\n            color: ${color.currentColor};\r\n          }\r\n          \r\n          .icon-quote {\r\n            font-size: 0.95em;\r\n            padding-right: 10px;\r\n          }\r\n          \r\n          .author {\r\n            text-align: right;\r\n            padding-right: 0.9375em;\r\n            font-size: 1em;\r\n            color: ${color.currentColor};\r\n          }\r\n\r\n        }\r\n    `\r\n\r\n    return (\r\n        <TextPageStyled>\r\n            <div className=\"text\">\r\n                <FontAwesomeIcon className=\"icon-quote\" icon={faQuoteLeft} /><span>{quote.text}</span>\r\n            </div>\r\n            <div className=\"author\">\r\n                -<span>{quote.author}</span>\r\n            </div>\r\n        </TextPageStyled>\r\n    )\r\n};\r\n\r\nexport default Quote;","import React from 'react';\r\nimport styled from 'styled-components';\r\nimport { FontAwesomeIcon } from '@fortawesome/react-fontawesome';\r\nimport { faTwitter, faTumblr } from '@fortawesome/free-brands-svg-icons';\r\n \r\nconst Button = ({ handleClick, color, quote }) => {\r\n    const ButtonsPageStyled = styled.div`\r\n    .buttons {\r\n        display: flex;\r\n        flex-flow: row nowrap;\r\n        justify-content: space-between;\r\n        margin: 30px 15px 10px 15px;\r\n        padding: 0;\r\n      }\r\n      \r\n      .button {\r\n        border: none;\r\n        border-radius: 3px;\r\n        outline: none;\r\n        color: white;\r\n        background-color: ${color.currentColor};\r\n        -webkit-animation-name: delay;\r\n        -webkit-animation-duration: 1s;\r\n      }\r\n\r\n      .button:hover {\r\n          opacity: 0.8;\r\n      }\r\n      \r\n      a {\r\n        color: white;\r\n        text-decoration: none;\r\n      }\r\n\r\n      .button-icon {\r\n        width: 40px;\r\n        height: 40px;\r\n        margin: 2px;\r\n        padding: 0;\r\n      }\r\n      \r\n      .button-quote {\r\n        width: 105px;\r\n        height: 40px;\r\n      }\r\n      \r\n      .icon {\r\n        font-size: 1.5em;\r\n      }\r\n\r\n      @-webkit-keyframes delay {\r\n        from{background: ${color.previousColor};}\r\n        to{background: ${color.currentColor};}\r\n      }\r\n    `\r\n    const linkTumblr = `https://www.tumblr.com/widgets/share/tool?posttype=quote&tags=quotes,freecodecamp&caption=${encodeURIComponent(quote.author)}&content=${encodeURIComponent(quote.text)}&canonicalUrl=https%3A%2F%2Fwww.tumblr.com%2Fbuttons&shareSource=tumblr_share_button`\r\n    const linkTwitter = `https://twitter.com/intent/tweet?hashtags=quotes&related=freecodecamp&text=\"${encodeURIComponent(quote.text)}\" -${encodeURIComponent(quote.author)}`\r\n    \r\n    return (\r\n        <ButtonsPageStyled>\r\n            <div className=\"buttons\">\r\n                <div className=\"buttons-icon\">\r\n                    <button className=\"button button-icon\">\r\n                        <a href={linkTwitter} target=\"_blank\" rel=\"noopener noreferrer\"><FontAwesomeIcon className=\"icon\" icon={faTwitter} /></a>\r\n                    </button>\r\n                    <button className=\"button button-icon\">\r\n                        <a href={linkTumblr} target=\"_blank\" rel=\"noopener noreferrer\"><FontAwesomeIcon className=\"icon\" icon={faTumblr} /></a>\r\n                    </button>\r\n                </div>\r\n                <button className=\"button button-quote\" onClick={handleClick}>New quote</button>\r\n            </div>\r\n        </ButtonsPageStyled>\r\n    )\r\n};\r\n\r\nexport default Button;\r\n","import React, { useState, useEffect } from 'react';\nimport './App.css';\nimport Quote from './components/Quote';\nimport Button from './components/Button';\nimport styled from 'styled-components'\n\nfunction App() {\n\n  var colors = ['#16a085', '#27ae60', '#2c3e50', '#f39c12', '#e74c3c', '#9b59b6', '#FB6964', '#342224', \"#472E32\", \"#BDBB99\", \"#77B1A9\", \"#73A857\"];\n\n  const [quote, setQuote] = useState({\n    text: '',\n    author: ''\n  });\n  const [nroQuote, setNroQuote] = useState(0);\n  const [result, setResult] = useState({});\n  const [color, setColor] = useState({\n    previousColor: '',\n    currentColor: colors[Math.floor(Math.random() * colors.length)]\n    \n  });\n\n  const MainStyled = styled.div`\n    .app {\n      height: 100vh;\n      width: 100vw;\n      font-family: 'Raleway', sans-serif;\n      display: flex;\n      flex-flow: row wrap;\n      justify-content: center;\n      align-items: center;\n      background: ${color.currentColor};\n      color: ${color.currentColor};\n    }\n    .container {\n      width: 34.375em;\n      height: auto;\n      padding: 1.5625em;\n      background-color: #ffffff;\n      text-align: center;\n      border-radius: 4px;\n    }\n  `\n\n  useEffect(() => {\n    // Consumir API de Quote y author\n    const consultarAPI = async () => {\n      const url = 'https://gist.githubusercontent.com/camperbot/5a022b72e96c4c9585c32bf6a75f62d9/raw/e3c6895ce42069f0ee7e991229064f167fe8ccdc/quotes.json';\n      const response = await fetch(url);\n      const result = await response.json();\n      // Obtengo el resultado de consumir la API\n      setResult(result);\n      // Actualizar estado\n      setQuote({\n        text: result.quotes[nroQuote].quote,\n        author: result.quotes[nroQuote].author\n      });\n    }\n    consultarAPI();\n  }, [nroQuote]);\n\n  const handleClick = () => {\n    const valueNroQuote = Math.floor(Math.random() * result.quotes.length);\n    const valueNroColor = Math.floor(Math.random() * colors.length);\n    setNroQuote(valueNroQuote);\n    setColor({\n      previousColor: color.currentColor,\n      currentColor: colors[valueNroColor]\n    });\n  }\n\n  return (\n    <MainStyled>\n      <div className=\"app\">\n        <div className=\"container\">\n          <Quote quote={quote} color={color} />\n          <Button handleClick={handleClick} color={color} quote={quote}/>\n        </div>\n      </div>\n    </MainStyled>\n  );\n}\n\nexport default App;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport App from './App';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n"],"sourceRoot":""}